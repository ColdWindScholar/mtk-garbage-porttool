# This part code is auto generated by AI
import mmap
import binascii


def hex2byte(hex_str):
    return binascii.unhexlify(hex_str)


def hexpatch(file_path: str, from_: str, to: str) -> bool:
    patched = False

    with open(file_path, "r+b") as f:
        with mmap.mmap(f.fileno(), 0) as m:
            pattern = hex2byte(from_)
            patch = hex2byte(to)
            end = m.tell() + len(m)
            curr = m.tell()
            while curr < end:
                curr = m.find(pattern, curr)
                if curr == -1:
                    return patched
                print(f"Patch @ {curr:08X} [{from_}] -> [{to}]")
                m[curr:curr + len(pattern)] = b'\0' * len(pattern)
                m[curr:curr + len(patch)] = patch
                patched = True
                curr += len(patch)

    return patched
